[tool.poetry]
name = "coreproject"
version = "0.1.0"
description = "A modern backend powering the the world's most advanced anime site"
authors = ["baseplate-admin <61817579+baseplate-admin@users.noreply.github.com>"]
readme = "README.md"
license = "AGPL-3.0-only"


[tool.poetry.dependencies]
python = "^3.11"
django = {version = '>=4.2', extras = ['argon2']}
# First Party ( Redis )
redis = {extras = ['hiredis'], version = ">=4.1"}
# First party ( Image )
pillow = "*"
# First Party ( Database )
psycopg = {extras = ["binary"], version = "^3.1.8"}
# 3rd Party ( Files )
django-dynamic-filenames = "*"
# 3rd Party ( Brute Force protection )
django-defender = ">=0.9.7"
# 3rd Party ( Tailwind CSS )
django-tailwind = ">=3.5.0"
# 3rd Party ( Middlewares )
django_cleanup = "*"
django_cors_headers = "*"
# 3rd Party ( Environmental Variables )
python_dotenv = "*"
# 3rd Party ( WhiteNoise )
whitenoise = {version = "*"}
# 3rd Party ( Tasks )
celery = {extras = ["redis"], version = ">=5.2.7"}
# 3rd Party ( Better admin widgets )
django-admin-hstore-widget = ">=1.2.1"   # https://github.com/PokaInc/django-admin-hstore-widget/pull/25
# 3rd Party ( Model Fields )
django-colorfield = "*"
# Rest framework
django_ninja = "*"
ninja-put-patch-file-upload-middleware = ">=0.1.1"
pydantic = {extras = ["email"], version = "*"}
# ===================================================
httpx = {extras = ['http2'], version = "*"}
# Application servers
gunicorn = {extras = ["setproctile"], version = "*"}
uvicorn = {extras = ["standard"], version = ">=0.21.1"}
# Typing support
django-stubs-ext = "*"
# ===================================================
# Color Grabber
colorthief = ">=0.2.1"
django-treenode = "^0.19.0"



[tool.poetry.group.dev.dependencies]
## Watchfiles
# https://github.com/adamchainz/django-watchfiles/issues/12
# django-watchfiles = "*"
# Django
django_debug_toolbar = "*"
django_dbbackup = "*"
django_cprofile_middleware = "*"
## Code formatting
# Black
black = "*"
# Linting
ruff = "*"
# Mypy
mypy = "*"
django_stubs = {extras = ["compatible_mypy"], version = "*"}
# Types
types_redis = "*"
# Task Runner
poethepoet = "^0.19.0"
isort = "^5.12.0"

[tool.poe.tasks]
dev = 'python ./django_core/manage.py runserver 127.0.0.1:9000'
## Prod servers
prod_uvicorn = "gunicorn --app-dir=django_core core.asgi:application -w 4 -k uvicorn.workers.UvicornWorker" # For linux only
##  Migrations
sync = "python ./django_core/manage.py migrate"
mksync = "python ./django_core/manage.py makemigrations"
createsuperuser = 'python ./django_core/manage.py createsuperuser'
## Staticfiles
collectstatic = "python ./django_core/manage.py collectstatic --clear --link" # Dont duplicate copy files.
## Mypy
mypy = "mypy . --enable-incomplete-feature=Unpack"
## Tailwind
tailwind_install = "python ./django_core/manage.py tailwind install"
tailwind_start = "python ./django_core/manage.py tailwind start"
tailwind_build = "python ./django_core/manage.py tailwind build"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core",
]

[tool.black]
line-length = 92
target-version = ["py311"]

[tool.mypy]
show_error_codes = true
warn_unreachable = true
strict = true
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true
ignore_missing_imports = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
check_untyped_defs = true
follow_imports = "silent"
plugins = ["mypy_django_plugin.main"]
exclude = [
    "migrations"
]
mypy_path = "django_core,tsukaeru"
namespace_packages = true
explicit_package_bases = true

[tool.django-stubs]
django_settings_module = "core.settings"

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
force_sort_within_sections = true
combine_as_imports = true
force_grid_wrap = 0

sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "DJANGO",
    "LOCALFOLDER"
]

known_django = [
    'django',
]

[tool.ruff]
line-length = 92

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    # https://github.com/charliermarsh/ruff/issues/61#issuecomment-1233497658
    '**/migrations'
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11
target-version = "py311"


[tool.ruff.per-file-ignores]
"*/__init__.py" = ["E402",'E501']
"*/settings.py" = ["E402"]
"*/api_v1.py" = ["E402"]
"*/urls.py" = ['E402']

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
