# Generated by Django 4.1.1 on 2022-09-25 04:19

import apps.user.models
import apps.user.validators.username

import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = []

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        validators=[apps.user.validators.username.username_validator],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Required. A valid email with a valid domain",
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "username_discriminator",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Optional. 4 characters or fewer. If not provided a random `username_discriminator` will be selected.",
                        null=True,
                        validators=[
                            django.core.validators.MaxLengthValidator(4),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        default=None,
                        null=True,
                        upload_to=apps.user.models.avatar,
                    ),
                ),
                ("ip", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "unique_together": {("username", "username_discriminator")},
            },
        ),
        migrations.AlterModelTable(
            name="customuser",
            table="user",
        ),
        migrations.AlterField(
            model_name="customuser",
            name="username_discriminator",
            field=models.BigIntegerField(
                blank=True,
                help_text="Optional. 4 characters or fewer. If not provided a random `username_discriminator` will be selected.",
                null=True,
                validators=[
                    django.core.validators.MaxValueValidator(36),
                    django.core.validators.MinValueValidator(1),
                ],
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="avatar_provider",
            field=models.URLField(
                default="https://seccdn.libravatar.org/avatar/{EMAIL}?s=512"
            ),
        ),
    ]
